{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI UI.\n *\n * @module      tiny_ai/ui\n * @copyright   2023 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport AiModal from 'tiny_ai/modal';\nimport {getContextId} from 'tiny_ai/options';\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport {wrapEditedSections} from 'tiny_ai/textmark';\nimport {loadingMessages} from 'tiny_ai/loading';\n\nlet responseObj = null;\n\n/**\n * Display the modal when the AI button is clicked.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\nexport const displayModal = async(editor) => {\n    const modalObject = await ModalFactory.create({\n        type: AiModal.TYPE,\n        templateContext: getTemplateContext(editor),\n        large: true,\n    });\n\n    const modalroot = await modalObject.getRoot();\n    const root = modalroot[0];\n\n    modalObject.show();\n    modalroot.on(ModalEvents.hidden, () => {\n        modalObject.destroy();\n    });\n\n    // Add the event listener for the button click events.\n    root.addEventListener('click', (e) => {\n        const submitBtn = e.target.closest('[data-action=\"generate\"]');\n        const insertBtn = e.target.closest('[data-action=\"inserter\"]');\n        const cancelBtn = e.target.closest('[data-action=\"cancel\"]');\n        if (submitBtn) {\n            e.preventDefault();\n            handleSubmit(editor, root, submitBtn);\n        } else if (insertBtn) {\n            e.preventDefault();\n            handleInsert(editor, root);\n            modalObject.destroy();\n        } else if (cancelBtn) {\n            modalObject.destroy();\n        }\n    });\n\n    const generateBtn = root.querySelector('#' + editor.id + '_tiny_ai_generatebutton');\n    const promptArea = root.querySelector('#' + editor.id + '_tiny_ai_prompttext');\n\n    // Add the event listener for the prompt text area.\n    promptArea.addEventListener('input', () => {\n        // Enable the generate button if there is text in the prompt area.\n        // Disable the generate button if there is no text in the prompt area.\n        generateBtn.disabled = promptArea.value.trim() === '';\n    });\n};\n\n/**\n * Get the context to use in the modal template.\n *\n * @param {TinyMCE.editor} editor\n * @returns {Object}\n */\nconst getTemplateContext = (editor) => {\n    return {\n        elementid: editor.id,\n    };\n};\n\n/**\n * Handle the submit action.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst handleSubmit = async(editor, root, submitBtn) => {\n    // Display the loading spinner.\n    displayLoading(editor.id, root, submitBtn);\n\n    // Get the context id.\n    const contextId = getContextId(editor);\n    const promptText = root.querySelector('#' + editor.id + '_tiny_ai_prompttext').value;\n\n    // Pass the prompt text to the webservice using Ajax.\n    const request = {\n        methodname: 'tiny_ai_generate_content',\n        args: {\n            contextid: contextId,\n            prompttext: promptText,\n        }\n    };\n\n    // Try making the ajax call and catch any errors.\n    try {\n        responseObj = await Ajax.call([request])[0];\n        const generatedResponseEl = root.querySelector('#' + editor.id + '_tiny_ai_responsetext');\n        const insertBtn = root.querySelector('[data-action=\"inserter\"]');\n        generatedResponseEl.value = responseObj.generatedcontent;\n        generatedResponseEl.disabled = false;\n        hideLoading(editor.id, root, submitBtn);\n        insertBtn.classList.remove('hidden');\n\n    } catch (error) {\n        window.console.log(error);\n        // TODO: Display error message in modal.\n    }\n\n};\n\n/**\n * Display the loading action in the modal.\n *\n * @param {Integer} editorId The id of the editor.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst displayLoading = (editorId, root, submitBtn) => {\n    const loadingSpinnerDiv = root.querySelector('#' + editorId + \"_tiny_ai_spinner\");\n    const overlayDiv = root.querySelector('#' + editorId + '_tiny_ai_overlay');\n    const blurDiv = root.querySelector('#' + editorId + '_tiny_ai_blur');\n    const loadingTextDiv = root.querySelector('#' + editorId + \"_tiny_ai_loading_text\");\n\n    loadingMessages(loadingTextDiv);\n    loadingSpinnerDiv.classList.remove('hidden');\n    overlayDiv.classList.remove('hidden');\n    blurDiv.classList.add('tiny-ai-blur');\n    submitBtn.innerHTML = 'Generating...';\n    submitBtn.disabled = true;\n};\n\n/**\n * Hide the loading action in the modal.\n *\n * @param {Integer} editorId The id of the editor.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst hideLoading = (editorId, root, submitBtn) => {\n    const loadingSpinnerDiv = root.querySelector('#' + editorId + \"_tiny_ai_spinner\");\n    const overlayDiv = root.querySelector('#' + editorId + '_tiny_ai_overlay');\n    const blurDiv = root.querySelector('#' + editorId + '_tiny_ai_blur');\n\n    loadingSpinnerDiv.classList.add('hidden');\n    overlayDiv.classList.add('hidden');\n    blurDiv.classList.remove('tiny-ai-blur');\n    submitBtn.innerHTML = 'Regenerate';\n    submitBtn.disabled = false;\n};\n\n/**\n * Replace double line breaks with <br> and with </p><p> for paragraphs.\n *\n * @param {String} text The text to replace.\n * @returns {String}\n */\nconst replaceLineBreaks = (text) => {\n    // Replace double line breaks with </p><p> for paragraphs\n    const textWithParagraphs = text.replace(/\\n{2,}|\\r\\n/g, '</p><p>');\n\n    // Replace remaining single line breaks with <br> tags\n    const textWithBreaks = textWithParagraphs.replace(/\\n/g, '<br>');\n\n    // Add opening and closing <p> tags to wrap the entire content\n    return `<p>${textWithBreaks}</p>`;\n};\n\n/**\n * Handle the insert action.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {Object} root The root element of the modal.\n */\nconst handleInsert = async(editor, root) => {\n    // Update the generated response with the content from the form.\n    // In case the user has edited the response.\n    const generatedResponseEl = root.querySelector('#' + editor.id + '_tiny_ai_responsetext');\n\n    // Wrap the edited sections in the response with tags.\n    // This is so we can differentiate between the edited sections and the generated content.\n    const wrappedEditedResponse = await wrapEditedSections(responseObj.generatedcontent, generatedResponseEl.value);\n\n    // Replace double line breaks with <br> and with </p><p> for paragraphs.\n    responseObj.editedtext = replaceLineBreaks(wrappedEditedResponse);\n\n    window.console.log(responseObj);\n\n    // Generate the HTML for the response.\n    const formattedResponse = await Templates.render('tiny_ai/insert', responseObj);\n\n    // Insert the response into the editor.\n    editor.insertContent(formattedResponse);\n    editor.execCommand('mceRepaint');\n    editor.windowManager.close();\n};\n"],"names":["responseObj","async","modalObject","ModalFactory","create","type","AiModal","TYPE","templateContext","getTemplateContext","editor","large","modalroot","getRoot","root","show","on","ModalEvents","hidden","destroy","addEventListener","e","submitBtn","target","closest","insertBtn","cancelBtn","preventDefault","handleSubmit","handleInsert","generateBtn","querySelector","id","promptArea","disabled","value","trim","elementid","displayLoading","request","methodname","args","contextid","prompttext","Ajax","call","generatedResponseEl","generatedcontent","hideLoading","classList","remove","error","window","console","log","editorId","loadingSpinnerDiv","overlayDiv","blurDiv","loadingTextDiv","add","innerHTML","wrappedEditedResponse","editedtext","text","textWithBreaks","replace","replaceLineBreaks","formattedResponse","Templates","render","insertContent","execCommand","windowManager","close"],"mappings":"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"}