{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI UI.\n *\n * @module      tiny_ai/ui\n * @copyright   2023 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport AiModal from 'tiny_ai/modal';\nimport {getContextId} from 'tiny_ai/options';\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\n\n/**\n * Display the modal when the AI button is clicked.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\nexport const displayModal = async(editor) => {\n    const modalObject = await ModalFactory.create({\n        type: AiModal.TYPE,\n        templateContext: getTemplateContext(editor),\n        large: true,\n    });\n\n    const modalroot = await modalObject.getRoot();\n    const root = modalroot[0];\n\n    modalObject.show();\n    modalroot.on(ModalEvents.hidden, () => {\n        modalObject.destroy();\n    });\n\n    root.addEventListener('click', (e) => {\n        const submitBtn = e.target.closest('[data-action=\"generate\"]');\n        const insertBtn = e.target.closest('[data-action=\"inserter\"]');\n        const cancelBtn = e.target.closest('[data-action=\"cancel\"]');\n        if (submitBtn) {\n            e.preventDefault();\n            handleSubmit(editor, root, submitBtn);\n        } else if (insertBtn) {\n            e.preventDefault();\n            handleInsert(editor, root);\n            modalObject.destroy();\n        } else if (cancelBtn) {\n            modalObject.destroy();\n        }\n    });\n};\n\n/**\n * Get the context to use in the modal template.\n *\n * @param {TinyMCE.editor} editor\n * @returns {Object}\n */\nconst getTemplateContext = (editor) => {\n\n    return {\n        elementid: editor.id,\n    };\n};\n\n/**\n * Handle the submit action.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst handleSubmit = async(editor, root, submitBtn) => {\n    // Display the loading spinner.\n    displayLoading(editor.id, root, submitBtn);\n\n    // Get the context id.\n    const contextId = getContextId(editor);\n\n    // Pass the prompt text to the webservice using Ajax.\n    const request = {\n        methodname: 'tiny_ai_generate_content',\n        args: {\n            contextid: contextId,\n            prompttext: 'This is a test prompt',\n        }\n    };\n\n    // Try making the ajax call and catch any errors.\n    try {\n        const response = await Ajax.call([request])[0];\n        const generatedResponseEl = root.querySelector('#' + editor.id + '_tiny_ai_responsetext');\n        const insertBtn = root.querySelector('[data-action=\"inserter\"]');\n        generatedResponseEl.innerHTML = response.contentresponse;\n        generatedResponseEl.disabled = false;\n        hideLoading(editor.id, root, submitBtn);\n        insertBtn.classList.remove('hidden');\n        window.console.log(response);\n    } catch (error) {\n        window.console.log(error);\n        // TODO: Display error message in modal.\n    }\n\n};\n\n/**\n * Display the loading action in the modal.\n *\n * @param {Integer} editorId The id of the editor.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst displayLoading = (editorId, root, submitBtn) => {\n    const loadingSpinnerDiv = root.querySelector('#' + editorId + \"_tiny_ai_spinner\");\n    const overlayDiv = root.querySelector('#' + editorId + '_tiny_ai_overlay');\n    const blurDiv = root.querySelector('#' + editorId + '_tiny_ai_blur');\n    const currentForm = root.querySelector('form');\n\n    loadingSpinnerDiv.classList.remove('hidden');\n    overlayDiv.classList.remove('hidden');\n    blurDiv.classList.add('tiny-ai-blur');\n    submitBtn.innerHTML = 'Generating...';\n    submitBtn.disabled = true;\n    window.console.log(currentForm);\n};\n\n/**\n * Hide the loading action in the modal.\n *\n * @param {Integer} editorId The id of the editor.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst hideLoading = (editorId, root, submitBtn) => {\n    const loadingSpinnerDiv = root.querySelector('#' + editorId + \"_tiny_ai_spinner\");\n    const overlayDiv = root.querySelector('#' + editorId + '_tiny_ai_overlay');\n    const blurDiv = root.querySelector('#' + editorId + '_tiny_ai_blur');\n    const currentForm = root.querySelector('form');\n\n    loadingSpinnerDiv.classList.add('hidden');\n    overlayDiv.classList.add('hidden');\n    blurDiv.classList.remove('tiny-ai-blur');\n    submitBtn.innerHTML = 'Regenerate';\n    submitBtn.disabled = false;\n    window.console.log(currentForm);\n};\n\n/**\n * Handle the insert action.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {Object} root The root element of the modal.\n */\nconst handleInsert = async(editor, root) => {\n    const generatedResponseEl = root.querySelector('#' + editor.id + '_tiny_ai_responsetext');\n    const generatedResponse = generatedResponseEl.value;\n    const formattedResponse = await Templates.render('tiny_ai/insert', {content: generatedResponse});\n    window.console.log(formattedResponse);\n    editor.insertContent(formattedResponse);\n    editor.execCommand('mceRepaint');\n    editor.windowManager.close();\n};\n"],"names":["async","modalObject","ModalFactory","create","type","AiModal","TYPE","templateContext","getTemplateContext","editor","large","modalroot","getRoot","root","show","on","ModalEvents","hidden","destroy","addEventListener","e","submitBtn","target","closest","insertBtn","cancelBtn","preventDefault","handleSubmit","handleInsert","elementid","id","displayLoading","request","methodname","args","contextid","prompttext","response","Ajax","call","generatedResponseEl","querySelector","innerHTML","contentresponse","disabled","hideLoading","classList","remove","window","console","log","error","editorId","loadingSpinnerDiv","overlayDiv","blurDiv","currentForm","add","generatedResponse","value","formattedResponse","Templates","render","content","insertContent","execCommand","windowManager","close"],"mappings":";;;;;;;kVAmC4BA,MAAAA,eAClBC,kBAAoBC,uBAAaC,OAAO,CAC1CC,KAAMC,eAAQC,KACdC,gBAAiBC,mBAAmBC,QACpCC,OAAO,IAGLC,gBAAkBV,YAAYW,UAC9BC,KAAOF,UAAU,GAEvBV,YAAYa,OACZH,UAAUI,GAAGC,sBAAYC,QAAQ,KAC7BhB,YAAYiB,aAGhBL,KAAKM,iBAAiB,SAAUC,UACtBC,UAAYD,EAAEE,OAAOC,QAAQ,4BAC7BC,UAAYJ,EAAEE,OAAOC,QAAQ,4BAC7BE,UAAYL,EAAEE,OAAOC,QAAQ,0BAC/BF,WACAD,EAAEM,iBACFC,aAAalB,OAAQI,KAAMQ,YACpBG,WACPJ,EAAEM,iBACFE,aAAanB,OAAQI,MACrBZ,YAAYiB,WACLO,WACPxB,YAAYiB,oBAWlBV,mBAAsBC,SAEjB,CACHoB,UAAWpB,OAAOqB,KAWpBH,aAAe3B,MAAMS,OAAQI,KAAMQ,aAErCU,eAAetB,OAAOqB,GAAIjB,KAAMQ,iBAM1BW,QAAU,CACZC,WAAY,2BACZC,KAAM,CACFC,WANU,yBAAa1B,QAOvB2B,WAAY,oCAMVC,eAAiBC,cAAKC,KAAK,CAACP,UAAU,GACtCQ,oBAAsB3B,KAAK4B,cAAc,IAAMhC,OAAOqB,GAAK,yBAC3DN,UAAYX,KAAK4B,cAAc,4BACrCD,oBAAoBE,UAAYL,SAASM,gBACzCH,oBAAoBI,UAAW,EAC/BC,YAAYpC,OAAOqB,GAAIjB,KAAMQ,WAC7BG,UAAUsB,UAAUC,OAAO,UAC3BC,OAAOC,QAAQC,IAAIb,UACrB,MAAOc,OACLH,OAAOC,QAAQC,IAAIC,SAarBpB,eAAiB,CAACqB,SAAUvC,KAAMQ,mBAC9BgC,kBAAoBxC,KAAK4B,cAAc,IAAMW,SAAW,oBACxDE,WAAazC,KAAK4B,cAAc,IAAMW,SAAW,oBACjDG,QAAU1C,KAAK4B,cAAc,IAAMW,SAAW,iBAC9CI,YAAc3C,KAAK4B,cAAc,QAEvCY,kBAAkBP,UAAUC,OAAO,UACnCO,WAAWR,UAAUC,OAAO,UAC5BQ,QAAQT,UAAUW,IAAI,gBACtBpC,UAAUqB,UAAY,gBACtBrB,UAAUuB,UAAW,EACrBI,OAAOC,QAAQC,IAAIM,cAUjBX,YAAc,CAACO,SAAUvC,KAAMQ,mBAC3BgC,kBAAoBxC,KAAK4B,cAAc,IAAMW,SAAW,oBACxDE,WAAazC,KAAK4B,cAAc,IAAMW,SAAW,oBACjDG,QAAU1C,KAAK4B,cAAc,IAAMW,SAAW,iBAC9CI,YAAc3C,KAAK4B,cAAc,QAEvCY,kBAAkBP,UAAUW,IAAI,UAChCH,WAAWR,UAAUW,IAAI,UACzBF,QAAQT,UAAUC,OAAO,gBACzB1B,UAAUqB,UAAY,aACtBrB,UAAUuB,UAAW,EACrBI,OAAOC,QAAQC,IAAIM,cASjB5B,aAAe5B,MAAMS,OAAQI,cAEzB6C,kBADsB7C,KAAK4B,cAAc,IAAMhC,OAAOqB,GAAK,yBACnB6B,MACxCC,wBAA0BC,mBAAUC,OAAO,iBAAkB,CAACC,QAASL,oBAC7EV,OAAOC,QAAQC,IAAIU,mBACnBnD,OAAOuD,cAAcJ,mBACrBnD,OAAOwD,YAAY,cACnBxD,OAAOyD,cAAcC"}