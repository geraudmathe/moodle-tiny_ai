{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI UI.\n *\n * @module      tiny_ai/ui\n * @copyright   2023 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport AiModal from 'tiny_ai/modal';\nimport {getContextId} from 'tiny_ai/options';\nimport Ajax from 'core/ajax';\n\n/**\n * Display the modal when the AI button is clicked.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\nexport const displayModal = async(editor) => {\n    const modalObject = await ModalFactory.create({\n        type: AiModal.TYPE,\n        templateContext: getTemplateContext(editor),\n        large: true,\n    });\n\n    const modalroot = await modalObject.getRoot();\n    const root = modalroot[0];\n\n    modalObject.show();\n    modalroot.on(ModalEvents.hidden, () => {\n        modalObject.destroy();\n    });\n\n    root.addEventListener('click', (e) => {\n        const submitBtn = e.target.closest('[data-action=\"generate\"]');\n        if (submitBtn) {\n            e.preventDefault();\n            handleSubmit(editor, root, submitBtn);\n            // TODO: Destroy the modal and call the AI service.\n        }\n    });\n};\n\n/**\n * Get the context to use in the modal template.\n *\n * @param {TinyMCE.editor} editor\n * @returns {Object}\n */\nconst getTemplateContext = (editor) => {\n\n    return {\n        elementid: editor.id,\n    };\n};\n\n/**\n * Handle the submit action.\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst handleSubmit = async(editor, root, submitBtn) => {\n    // Display the loading spinner.\n    displayLoading(editor.id, root, submitBtn);\n\n    // Get the context id.\n    const contextId = getContextId(editor);\n    window.console.log(contextId);\n    window.console.log('context id is ' + contextId);\n\n    // Pass the prompt text to the webservice using Ajax.\n    const request = {\n        methodname: 'tiny_ai_generate_content',\n        args: {\n            contextid: contextId,\n            prompttext: 'This is a test prompt',\n        }\n    };\n\n    // Try making the ajax call and catch any errors.\n    try {\n        const response = await Ajax.call([request])[0];\n        window.console.log(response);\n    } catch (error) {\n        window.console.log(error);\n    }\n\n};\n\n/**\n * Display the loading action in the modal.\n *\n * @param {Integer} editorId The id of the editor.\n * @param {Object} root The root element of the modal.\n * @param {Object} submitBtn The submit button element.\n */\nconst displayLoading = (editorId, root, submitBtn) => {\n    const loadingSpinnerDiv = root.querySelector('#' + editorId + \"_tiny_ai_spinner\");\n    const overlayDiv = root.querySelector('#' + editorId + '_tiny_ai_overlay');\n    const blurDiv = root.querySelector('#' + editorId + '_tiny_ai_blur');\n    const currentForm = root.querySelector('form');\n\n    loadingSpinnerDiv.classList.remove('hidden');\n    overlayDiv.classList.remove('hidden');\n    blurDiv.classList.add('tiny-ai-blur');\n    submitBtn.innerHTML = 'Generating...';\n    submitBtn.disabled = true;\n    window.console.log(currentForm);\n};\n"],"names":["async","modalObject","ModalFactory","create","type","AiModal","TYPE","templateContext","getTemplateContext","editor","large","modalroot","getRoot","root","show","on","ModalEvents","hidden","destroy","addEventListener","e","submitBtn","target","closest","preventDefault","handleSubmit","elementid","id","displayLoading","contextId","window","console","log","request","methodname","args","contextid","prompttext","response","Ajax","call","error","editorId","loadingSpinnerDiv","querySelector","overlayDiv","blurDiv","currentForm","classList","remove","add","innerHTML","disabled"],"mappings":";;;;;;;oSAkC4BA,MAAAA,eAClBC,kBAAoBC,uBAAaC,OAAO,CAC1CC,KAAMC,eAAQC,KACdC,gBAAiBC,mBAAmBC,QACpCC,OAAO,IAGLC,gBAAkBV,YAAYW,UAC9BC,KAAOF,UAAU,GAEvBV,YAAYa,OACZH,UAAUI,GAAGC,sBAAYC,QAAQ,KAC7BhB,YAAYiB,aAGhBL,KAAKM,iBAAiB,SAAUC,UACtBC,UAAYD,EAAEE,OAAOC,QAAQ,4BAC/BF,YACAD,EAAEI,iBACFC,aAAahB,OAAQI,KAAMQ,sBAYjCb,mBAAsBC,SAEjB,CACHiB,UAAWjB,OAAOkB,KAWpBF,aAAezB,MAAMS,OAAQI,KAAMQ,aAErCO,eAAenB,OAAOkB,GAAId,KAAMQ,iBAG1BQ,WAAY,yBAAapB,QAC/BqB,OAAOC,QAAQC,IAAIH,WACnBC,OAAOC,QAAQC,IAAI,iBAAmBH,iBAGhCI,QAAU,CACZC,WAAY,2BACZC,KAAM,CACFC,UAAWP,UACXQ,WAAY,oCAMVC,eAAiBC,cAAKC,KAAK,CAACP,UAAU,GAC5CH,OAAOC,QAAQC,IAAIM,UACrB,MAAOG,OACLX,OAAOC,QAAQC,IAAIS,SAYrBb,eAAiB,CAACc,SAAU7B,KAAMQ,mBAC9BsB,kBAAoB9B,KAAK+B,cAAc,IAAMF,SAAW,oBACxDG,WAAahC,KAAK+B,cAAc,IAAMF,SAAW,oBACjDI,QAAUjC,KAAK+B,cAAc,IAAMF,SAAW,iBAC9CK,YAAclC,KAAK+B,cAAc,QAEvCD,kBAAkBK,UAAUC,OAAO,UACnCJ,WAAWG,UAAUC,OAAO,UAC5BH,QAAQE,UAAUE,IAAI,gBACtB7B,UAAU8B,UAAY,gBACtB9B,UAAU+B,UAAW,EACrBtB,OAAOC,QAAQC,IAAIe"}